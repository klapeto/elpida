stages:
  - build-containers
  - build
  - package
  - deploy

variables:
  BUILD_DIR: './build'
  INSTALL_DIR: './AppDir'
  ELPIDA_VERSION_BUILD: $CI_PIPELINE_IID
  ELPIDA_VERSION_STRING: $ELPIDA_VERSION_MAJOR.$ELPIDA_VERSION_MINOR.$ELPIDA_VERSION_REVISION.$CI_PIPELINE_IID
  PACKAGE_PREFIX: Elpida
  PACKAGE_SUFFIX: x86_64
  PACKAGE_SEPARATOR: '-'
  PACKAGE_FILENAME: Elpida-$ELPIDA_VERSION_MAJOR.$ELPIDA_VERSION_MINOR.$ELPIDA_VERSION_REVISION.$CI_PIPELINE_IID-x86_64
  PACKAGE_FILENAME_DEPLOY: Elpida-latest-x86_64
  PACKAGE_FILENAME_DEPLOY_BETA: Elpida-latest-beta-x86_64
  DEPLOY_ENVIRONMENT: "development"
  GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_CONCURRENT_ID/project-name

workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        DEPLOY_ENVIRONMENT: "production"
    - if: $CI_COMMIT_REF_NAME == "staging"
      variables:
        DEPLOY_ENVIRONMENT: "staging"
    - when: always  

include:
  - local: 'ci/docker-image-linux.yml'
  - local: 'ci/linux.yml'
  - local: 'ci/windows.yml'
  # - local: 'ci/docker-image-windows.yml' # Do not run this because it takes a lot of time. Run and upload manually
