//
// Created by klapeto on 8/8/2024.
//

#include "RSAEncryptTask.hpp"

#include "Elpida/Core/ElpidaException.hpp"
#include "Utilities.hpp"

namespace Elpida
{
	static const unsigned char publicKeyDer[] = {
			0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86,
			0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00,
			0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xc2, 0x44, 0xbc,
			0xcf, 0x5b, 0xca, 0xcd, 0x80, 0x77, 0xae, 0xf9, 0x7a, 0x34, 0xbb, 0x37,
			0x6f, 0x5c, 0x76, 0x4c, 0xe4, 0xbb, 0x0c, 0x1d, 0xe7, 0xfe, 0x0f, 0xda,
			0xcf, 0x8c, 0x56, 0x65, 0x72, 0x6e, 0x2c, 0xf9, 0xfd, 0x87, 0x43, 0xeb,
			0x4c, 0x26, 0xb1, 0xd3, 0xf0, 0x87, 0xb1, 0x18, 0x68, 0x14, 0x7d, 0x3c,
			0x2a, 0xfa, 0xc2, 0x5d, 0x70, 0x19, 0x11, 0x00, 0x2e, 0xb3, 0x9c, 0x8e,
			0x38, 0x08, 0xbe, 0xe3, 0xeb, 0x7d, 0x6e, 0xc7, 0x19, 0xc6, 0x7f, 0x59,
			0x48, 0x84, 0x1b, 0xe3, 0x27, 0x30, 0x46, 0x30, 0xd3, 0xfc, 0xfc, 0xb3,
			0x35, 0x75, 0xc4, 0x31, 0x1a, 0xc0, 0xc2, 0x4c, 0x0b, 0xc7, 0x01, 0x95,
			0xb2, 0xdc, 0x17, 0x77, 0x9b, 0x09, 0x15, 0x04, 0xbc, 0xdb, 0x57, 0x0b,
			0x26, 0xda, 0x59, 0x54, 0x0d, 0x6e, 0xb7, 0x89, 0xbc, 0x53, 0x9d, 0x5f,
			0x8c, 0xad, 0x86, 0x97, 0xd2, 0x48, 0x4f, 0x5c, 0x94, 0xdd, 0x30, 0x2f,
			0xcf, 0xfc, 0xde, 0x20, 0x31, 0x25, 0x9d, 0x29, 0x25, 0x78, 0xb7, 0xd2,
			0x5b, 0x5d, 0x99, 0x5b, 0x08, 0x12, 0x81, 0x79, 0x89, 0xa0, 0xcf, 0x8f,
			0x40, 0xb1, 0x77, 0x72, 0x3b, 0x13, 0xfc, 0x55, 0x43, 0x70, 0x29, 0xd5,
			0x41, 0xed, 0x31, 0x4b, 0x2d, 0x6c, 0x7d, 0xcf, 0x99, 0x5f, 0xd1, 0x72,
			0x9f, 0x8b, 0x32, 0x96, 0xde, 0x5d, 0x8b, 0x19, 0x77, 0x75, 0xff, 0x09,
			0xbf, 0x26, 0xe9, 0xd7, 0x3d, 0xc7, 0x1a, 0x81, 0xcf, 0x05, 0x1b, 0x89,
			0xbf, 0x45, 0x32, 0xbf, 0x5e, 0xc9, 0xe3, 0x5c, 0x33, 0x4a, 0x72, 0x47,
			0xf4, 0x24, 0xae, 0x9b, 0x38, 0x24, 0x76, 0x9a, 0xa2, 0x9a, 0x50, 0x50,
			0x49, 0xf5, 0x26, 0xb9, 0x55, 0xa6, 0x47, 0xc9, 0x14, 0xa2, 0xca, 0xd4,
			0xa8, 0x8a, 0x9f, 0xe9, 0x5a, 0x5a, 0x12, 0xaa, 0x30, 0xd5, 0x78, 0x8b,
			0x39, 0x02, 0x03, 0x01, 0x00, 0x01,
	};

	void RSAEncryptTask::DoRunImpl()
	{
		auto context = _context.get();

		auto outputSize = _output->GetSize();
		auto output = _output->GetData();
		auto inputSize = _input->GetSize();
		auto input = _input->GetData();
		Exec([&]()
		{
			if (EVP_PKEY_encrypt(context, output, &outputSize, input, inputSize) <= 0)
			{
				Utilities::ThrowOpenSSLError("Failed encrypt: ");
			}
		});
	}

	Size RSAEncryptTask::GetOperationsPerformedPerRun()
	{
		return 1;
	}

	void RSAEncryptTask::Prepare(SharedPtr<AbstractTaskData> inputData)
	{
		_input = std::move(inputData);
		const unsigned char* data = publicKeyDer;
		size_t data_len = sizeof(publicKeyDer);

		EVP_PKEY* key;

		auto context = OSSL_DECODER_CTX_new_for_pkey(&key, "DER", nullptr, "RSA", EVP_PKEY_PUBLIC_KEY, nullptr, nullptr);

		auto result = OSSL_DECODER_from_data(context, &data, &data_len);

		_key = EvpPKeyPtr(key);

		if (result == 0)
		{
			Utilities::ThrowOpenSSLError("Failed to decode key: ");
		}

		const char* propertiesQuery = nullptr;
		_context = EvpPKeyCtxPtr(EVP_PKEY_CTX_new_from_pkey(nullptr, _key.get(), propertiesQuery));

		if (_context == nullptr)
		{
			Utilities::ThrowOpenSSLError("Failed to create Public key context: ");
		}

		if (EVP_PKEY_encrypt_init_ex(_context.get(), nullptr) <= 0)
		{
			Utilities::ThrowOpenSSLError("Failed to init encryptor: ");
		}

		std::size_t size = 0;
		if (EVP_PKEY_encrypt(_context.get(), nullptr, &size, _input->GetData(), _input->GetSize()) <= 0)
		{
			Utilities::ThrowOpenSSLError("Failed to get encryption size: ");
		}

		_output = std::make_shared<RawTaskData>(_input->GetAllocator());
		_output->Allocate(size);
	}

	SharedPtr<AbstractTaskData> RSAEncryptTask::Finalize()
	{
		return std::move(_output);
	}

	Size RSAEncryptTask::GetProcessedDataSize() const
	{
		return _input->GetSize();
	}

	TaskInfo RSAEncryptTask::DoGetInfo() const
	{
		return {
				"RSA encryption",
				"Encrypts data using public/private keys",
				"B",
				"The rate of encryption",
				ResultType::Throughput
		};
	}

	UniquePtr<Task> RSAEncryptTask::DoDuplicate() const
	{
		return std::make_unique<RSAEncryptTask>();
	}

} // Elpida